
<!DOCTYPE html>
<!--[if IE 8]> <html lang="en" class="ie8"> <![endif]-->  
<!--[if IE 9]> <html lang="en" class="ie9"> <![endif]-->  
<!--[if !IE]><!--> <html lang="en"> <!--<![endif]-->  
<head>
    <title>Question Answering System with HMM Speech Recognition</title>
    <!-- Meta -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Question Answering System with HMM Speech Recognition">
    <meta name="author" content="Hobert">    
    <link rel="shortcut icon" href="favicon.ico">  
    <link rel="icon" href="./favicon.ico">
    <meta property="og:image" content="assets/images/web-logo.jpg">
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:width" content="1024">
    <meta property="og:image:height" content="1024">
    <meta property=”og:description” content=”Hobert Website” />
    <meta name=”twitter:title” content=”Hobert website” />
    <link href='https://fonts.googleapis.com/css?family=Roboto:400,500,400italic,300italic,300,500italic,700,700italic,900,900italic' rel='stylesheet' type='text/css'>
    <!-- Global CSS -->
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="assets/plugins/bootstrap/css/bootstrap.min.css">

    <!-- Optional theme -->
    <link rel="stylesheet" href="assets/plugins/bootstrap/css/bootstrap-theme.min.css">
    <!-- Plugins CSS -->
    <link rel="stylesheet" href="assets/plugins/font-awesome/css/font-awesome.css">
    
    <!-- Theme CSS -->  
    <link id="theme-style" rel="stylesheet" href="assets/css/styles.css">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
    <!-- Angular.JS -->
    <script type="text/javascript" src="assets/plugins/jquery-1.12.4.min.js"></script>

    <script src="/javascripts/MediaStreamRecorder.js"></script>

    <!-- for Edige/FF/Chrome/Opera/etc. getUserMedia support -->
    <script src="https://cdn.WebRTC-Experiment.com/gumadapter.js"></script>
</head> 

<body>
    
    <header class="header">
        <div class="page-nav-space-holder hidden-xs">
            <div id="page-nav-wrapper" class="page-nav-wrapper text-center">
                <div class="container">
                    <ul id="page-nav" class="nav page-nav list-inline">
                        <li><a href="/">Home</a></li>
                        <li><a  href="/sound">Suara</a></li>
                        <li><a  href="/text">Text</a></li>
                        <li class="active"><a  href="/sound-text">Sound and Text</a></li>
                    </ul><!--//page-nav-->
                </div>
            </div><!--//page-nav-wrapper-->
        </div>
        
        
    </header><!--//header-->
    

     <div class="wrapper container">
        

        <section id="kampretan-section" class="kampretan-section section">
            <h2 class="section-title">Sound to Text</h2>
            <div class="record sound"  ng-app="soundApp" ng-controller="soundCtrl">
                    
                    <div class="player text-center">
                        <p>Record Sound here</p>
                         <div>
                        <section class="experiment" style="padding: 5px;">

                            <button id="start-recording">Start</button>
                            <button id="stop-recording" disabled>Stop</button>
                            <button id="save-recording" disabled>Save</button>
                        </section>
                    </div>

                        <!-- <button type="button" id="button_play" class="btn {{greenPlayer}}" ng-disabled="cantPlayed" ng-click="playFunction()"> -->
                          <!-- <i class="{{player}}"></i> -->
                        <!-- </button> -->
                        <!-- <p>State: {{state}}</p>    -->
                    </div>
                    <h4 align="left">Question Generated:</h4>
                    <div class="item active">
                        <blockquote class="quote">
                            <p id="hasil"></p>
                        </blockquote>
                    </div>

                    <div class="player text-center" >
                        
                        <button class="btn btn-primary" id="submitQuery">Get Answer</button>
                        <h4 align="left">Output Text:</h4>
                        <div class="item active" id="output-text">
                        <div id="loadingImage">
                        </div>
                            <blockquote class="quote">
                                <h3 id="jawaban"></h3>
                            </blockquote>
                        </div>
                    </div>
                    <div class="col-md-6col-md-offset-3" id="grow-box" >
                        <div class="relevant-list" ng-hide="showR">
                            <h4 id='title'></h4>
                            <p id = 'dokumen'></p>
                        </div>
                        <br>
                        <div class="btnshow-frame text-center">
                            <button type="button" class="btn btn-link" ng-click="showRelevantFunction()"> <i class="fa fa-chevron-up" ng-hide="showR"></i><br ng-hide="showR">{{resultBtnText}} <br ng-hide="!showR"> <i class="fa fa-chevron-down" ng-hide="!showR"></i> </button>
                        </div>
                    </div>

            </div>
        </section><!--//section-->
        
        
    </div><!--//wrapper-->
    
    <footer class="footer text-center">
        <div class="container">
            <small class="copyright">Template Copyright @ <a href="http://themes.3rdwavemedia.com/" target="_blank">3rd Wave Media</a> | Edited by: <a href="http://leopisang.net/" target="_blank">Leonardo Cahaya</a> | Hobert Ho </small>
        </div><!--//container-->
    </footer>
    
    
    <!-- Javascript -->          
    <script type="text/javascript" src="assets/plugins/jquery-1.12.4.min.js"></script>
    <script type="text/javascript" src="assets/plugins/bootstrap/js/bootstrap.min.js"></script>   
    <script type="text/javascript" src="assets/plugins/easy-pie-chart/dist/jquery.easypiechart.min.js"></script>
    <script type="text/javascript" src="assets/plugins/imagesloaded.pkgd.min.js"></script> 
    <script type="text/javascript" src="assets/plugins/isotope.pkgd.min.js"></script>  

    <!-- custom js -->
    <script type="text/javascript" src="assets/js/main.js"></script>
    <script>
        $('#submitQuery').click(function(){
            var questionText = document.getElementById('hasil').innerHTML;
            console.log(questionText);
            $.ajax({
                method:'POST',
                url:'/getAnswerAJAX',
                data: {'question':questionText},
                beforeSend: function(){
                    $('#submitQuery').attr("disabled",true);
                    $("#loadingImage").html("<img src='images/loading.gif' max-width='80px' max-height='60px'>");
                }
            }).done(function(response){
                $('#loadingImage').html('');
                $('#submitQuery').attr('disabled',false);
                console.log(response);
                var jawaban = document.getElementById('jawaban');
                var title = document.getElementById('title');
                var dokumen = document.getElementById('dokumen');
                if (response.jawaban =='undefined')
                {
                    response.jawaban = "NO ANSWER";
                }
                if (response.titleDoc =='undefined')
                {
                    response.titleDoc = 'not available';
                }
                if (response.content =='undefined')
                {
                    response.content = 'not available';
                }
                jawaban.innerHTML = response.jawaban;
                title.innerHTML = response.titleDoc;
                dokumen.innerHTML = response.content;
            });  
        });
    </script>

    <script>
            function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
                navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
            }
            var mediaConstraints = {
                audio: true
            };
            document.querySelector('#start-recording').onclick = function() {
                this.disabled = true;
                console.log('masuk');
                captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
            };
            document.querySelector('#stop-recording').onclick = function() {
                this.disabled = true;
                mediaRecorder.stop();
                mediaRecorder.stream.stop();
                document.querySelector('#start-recording').disabled = false;

            };
            document.querySelector('#save-recording').onclick = function() {
                this.disabled = true;
                mediaRecorder.save();
                // alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
            };
            var mediaRecorder;
            function onMediaSuccess(stream) {
                var audio = document.createElement('audio');
                audio = mergeProps(audio, {
                    controls: true,
                    muted: true,
                    src: URL.createObjectURL(stream)
                });
                audio.play();
                //audiosContainer.appendChild(audio);
                //audiosContainer.appendChild(document.createElement('hr'));
                mediaRecorder = new MediaStreamRecorder(stream);

                console.log(mediaRecorder);
                mediaRecorder.stream = stream;
                //var recorderType = document.getElementById('audio-recorderType').value;
                var recorderType = 'WebAudio API (WAV)';
                if (recorderType === 'MediaRecorder API') {
                    mediaRecorder.recorderType = MediaRecorderWrapper;
                }
                if (recorderType === 'WebAudio API (WAV)') {
                    mediaRecorder.recorderType = StereoAudioRecorder;
                    mediaRecorder.mimeType = 'audio/wav';
                }
                if (recorderType === 'WebAudio API (PCM)') {
                    mediaRecorder.recorderType = StereoAudioRecorder;
                    mediaRecorder.mimeType = 'audio/pcm';
                }
                // don't force any mimeType; use above "recorderType" instead.
                // mediaRecorder.mimeType = 'audio/webm'; // audio/ogg or audio/wav or audio/webm
                mediaRecorder.audioChannels = 1;
                mediaRecorder.ondataavailable = function(blob) {
                    var a = document.createElement('a');
                    a.target = '_blank';
                    a.innerHTML = 'Open Recorded Audio No. ' + (index++) + ' (Size: ' + bytesToSize(blob.size) + ') Time Length: ' + getTimeLength(timeInterval);
                    a.href = URL.createObjectURL(blob);
                    //audiosContainer.appendChild(a);
                    //audiosContainer.appendChild(document.createElement('hr'));
                };
                var timeInterval = 600000;
                if (timeInterval) timeInterval = parseInt(timeInterval);
                else timeInterval = 5 * 1000;
                // get blob after specific time interval
                mediaRecorder.start(timeInterval);
                document.querySelector('#stop-recording').disabled = false;
                document.querySelector('#save-recording').disabled = false;
            }
            function onMediaError(e) {
                console.error('media error', e);
            }
            //var audiosContainer = document.getElementById('audios-container');
            var index = 1;
            // below function via: http://goo.gl/B3ae8c
            function bytesToSize(bytes) {
                var k = 1000;
                var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
                if (bytes === 0) return '0 Bytes';
                var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
                return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
            }
            // below function via: http://goo.gl/6QNDcI
            function getTimeLength(milliseconds) {
                var data = new Date(milliseconds);
                return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
            }
            window.onbeforeunload = function() {
                document.querySelector('#start-recording').disabled = false;
            };
        </script>

    <script type="text/javascript">
        var state = 'stop';
        var app = angular.module('soundApp', []);
        app.controller('soundCtrl', function($scope) {
            $scope.player = 'fa fa-play';
            $scope.recorder = 'fa fa-microphone';
            $scope.greenRecord = 'btn-danger';
            $scope.greenPlayer = '';
            $scope.state = 'stopR';
            $scope.cantRecord = false;
            $scope.cantPlayed = true;

            $scope.showR = true;
                    $scope.resultBtnText = 'Show Relevant Document';
                    $scope.showRelevantFunction = function(){
                        $scope.showR = !$scope.showR;
                        if(!$scope.showR) {
                            $scope.resultBtnText = 'Hide Relevant Document';
                        } else {
                            $scope.resultBtnText = 'Show Relevant Document';
                        }
                    }


            $scope.recordFunction = function() {
                if($scope.state == 'playR'){
                        $scope.state = 'stopR';
                        $scope.recorder = 'fa fa-microphone';
                        $scope.greenRecord = 'btn-danger';
                        $scope.cantRecord = false;
                        $scope.cantPlayed = false;
                } else {
                    $scope.state = 'playR';
                    $scope.recorder = 'fa fa-stop';
                    $scope.cantPlayed = true;
                    $scope.greenRecord = 'btn-success';
                }
            }
            $scope.playFunction = function() {
                if($scope.state == 'playP'){
                    $scope.player = 'fa fa-play';
                    $scope.cantRecord = false;
                    $scope.greenPlayer = '';
                    $scope.state = 'stopP';
                } else {
                    $scope.state = 'playP';
                    $scope.cantRecord = true;
                    $scope.player = 'fa fa-stop';
                    $scope.greenPlayer = 'btn-success';
                }
            }
        });

    </script>

</body>
</html> 

